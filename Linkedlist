class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class LinkedList:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while temp is not None:
                print(temp.data,"-->",end=" ")
                temp=temp.next
            print(temp)
    def add_beg(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
        else:
            new_node.next=self.head
            self.head=new_node
    def add_end(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
        else:
            temp=self.head
            while temp.next is not None:
                temp=temp.next
            temp.next=new_node
    def add_before(self,data,x):
        new_node=Node(data)
        if self.head is None:
            print("Linked list is empty")
            return
        if self.head.data==x:
            new_node.next=self.head
            self.head=new_node
            return 
        else:
            temp=self.head
            while temp.next is not None:
                if temp.next.data==x:
                    break
                temp=temp.next
            if temp.next is None:
                print("The element not presented in linked list")
            else:
                new_node.next=temp.next
                temp.next=new_node
                
    def add_after(self,data,x):
        new_node=Node(data)
        if self.head is None:
            print("Linked list is empty")
            return
        if self.head.data==x:
            new_node.next=self.head.next
            self.head.next=new_node
            return 
        else:
            temp=self.head
            while temp.next is not None:
                if temp.data==x:
                    break
                temp=temp.next
            if temp.next is None:
                print("The element not presented in linked list")
            else:
                new_node.next=temp.next
                temp.next=new_node   
    def delete_beg(self):
        if self.head is None:
            print("Linked list is empty")
            return
        if self.head.next is None:
            self.head=None
        else:
            self.head=self.head.next
    def delete_end(self):
        if self.head is None:
            print("Linked list is empty")
            return
        if self.head.next is None:
            self.head=None
        else:
            temp=self.head
            while temp.next.next is not None:
                temp=temp.next
            temp.next=None
    def delete_node(self,x):
        if self.head is None:
            print("LinkedList is empty")
            return
        if self.head.data==x:
            self.head=self.head.next
            return
        temp=self.head
        while temp.next is not None:
            if temp.next.data==x:
                temp.next=temp.next.next
                return
            temp=temp.next
        else:
            print("Element not found")
l=LinkedList()
print("1. Add at beginning")
print("2. Add at end")
print("3. Add before a node")
print("4. Add after a node")
print("5. Delete from beginning")
print("6. Delete from end")
print("7. Delete a specific node")
print("8. Display linked list")
print("9. Exit")
while True:
    print("Choose an operation:")
    ch=int(input())
    if ch==1:
        print("Enter an element:")
        x=int(input())
        l.add_beg(x)
    elif ch==2:
        print("Enter an element:")
        x=int(input())
        l.add_end(x)
    elif ch==3:
        print("Enter an element:")
        x=int(input())
        p=int(input("Enter the position:"))
        l.add_before(x)
    elif ch==4:
        print("Enter an element:")
        x=int(input())
        p=int(input("Enter the position:"))
        l.add_after(x)
    elif ch==5:
        l.delete_beg()
    elif ch==6:
        l.delete_end()
    elif ch==7:
        print("Enter the node to delete:")
        x=int(input())
        l.delete_node(x)
    elif ch==8:
        l.display()
    elif ch==9:
        print("Exiting program")
        break
    else:
        print("Enter a valid choice")
